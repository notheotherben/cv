name: Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, closed ]

env:
  STAGING_DEPLOYMENT_CLIENT_ID: 6e63171f-321c-4fd8-8253-25e946143230
  STAGING_STORAGE_CONTAINER: "$web"
  STAGING_STORAGE_ACCOUNT: "resumebpannellbeta"
  STAGING_CDN_RESOURCEGROUP: app-resume
  STAGING_CDN_PROFILE: "cdn-resume-bpannell"
  STAGING_CDN_ENDPOINT: "resumebpannell-staging"

  LIVE_DEPLOYMENT_CLIENT_ID: 597d7084-1721-4432-968b-3503556375be
  LIVE_STORAGE_CONTAINER: "$web"
  LIVE_STORAGE_ACCOUNT: "resumebpannell"
  LIVE_CDN_RESOURCEGROUP: app-resume
  LIVE_CDN_PROFILE: "cdn-resume-bpannell"
  LIVE_CDN_ENDPOINT: "resumebpannell"
  
  DOCKER_IMAGE: spartan563/cv

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    steps:
    - uses: actions/checkout@v4.1.2

    - name: cache ~/.cargo
      uses: Swatinem/rust-cache@v2

    - name: Install rust with wasm target
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

    - name: Install trunk
      uses: jetli/trunk-action@v0.5.0
    
    - name: Build Website
      run: trunk build --release

    - name: Upload Artifact for Website
      uses: actions/upload-artifact@v4
      with:
        name: site
        path: ./dist

  deploy-staging:
    name: Deploy Staging (CDN)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    environment:
      name: Staging
      url: https://cv-staging.sierrasoftworks.com

    permissions:
      id-token: write
    
    steps:
      - name: Download Artifacts for Website
        uses: actions/download-artifact@v4
        with:
          name: site
          path: ./dist
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          subscription-id: "108b3ddb-53fb-4344-80b2-d6c151912be6"
          tenant-id: "a26571f1-22b3-4756-ac7b-39ca684fab48"
          client-id: ${{ env.STAGING_DEPLOYMENT_CLIENT_ID }}
          
      - name: Copy Artifacts to Storage
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Uploading Site Contents"
            az storage blob sync --container '${{ env.STAGING_STORAGE_CONTAINER }}' --account-name ${{ env.STAGING_STORAGE_ACCOUNT }} --source ./dist

      - name: Purge Azure CDN
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Purging CDN"
            az cdn endpoint purge -g ${{ env.STAGING_CDN_RESOURCEGROUP }} -n ${{ env.STAGING_CDN_ENDPOINT }} --profile-name ${{ env.STAGING_CDN_PROFILE }} --content-paths '/*'
  
  deploy-static-web-app:
    name: Deploy Static Web App
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    permissions:
      pull-requests: write
      checks: write

    steps:
      - name: Download Artifacts for Website
        uses: actions/download-artifact@v4
        with:
          name: site
          path: ./dist

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"
          api_location: ""
          skip_app_build: "true"
          skip_api_build: "true"

  deploy-live:
    name: Deploy Live (CDN)
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'push'

    environment:
      name: Production
      url: https://cv.sierrasoftworks.com

    permissions:
      id-token: write
      pages: write
    
    steps:
      - name: Download Artifacts for Website
        uses: actions/download-artifact@v4
        with:
          name: site
          path: ./dist
          
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          subscription-id: "108b3ddb-53fb-4344-80b2-d6c151912be6"
          tenant-id: "a26571f1-22b3-4756-ac7b-39ca684fab48"
          client-id: ${{ env.LIVE_DEPLOYMENT_CLIENT_ID }}
          
      - name: Copy Artifacts to Storage
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Uploading Site Contents"
            az storage blob sync --container '${{ env.LIVE_STORAGE_CONTAINER }}' --account-name ${{ env.LIVE_STORAGE_ACCOUNT }} --source ./dist

      - name: Purge Azure CDN
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Purging CDN"
            az cdn endpoint purge -g ${{ env.LIVE_CDN_RESOURCEGROUP }} -n ${{ env.LIVE_CDN_ENDPOINT }} --profile-name ${{ env.LIVE_CDN_PROFILE }} --content-paths '/*'
  
  deploy-docker:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [build]

    steps:
      - uses: actions/checkout@v4.1.2
      - name: Download Artifacts for Website
        uses: actions/download-artifact@v4
        with:
          name: site
          path: ./dist

      - name: Build image
        run: docker build . --file Dockerfile.dist --tag image

      - name: Log into registries
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          echo "${{ secrets.DOCKER_HUB }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          
      - name: Calculate version number
        id: version
        run: |
          VERSION=$(git describe --tags 2>/dev/null || git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Push image to GitHub
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/${{ github.event.repository.name }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          docker tag image $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
          docker tag image $IMAGE_ID:${{ steps.version.outputs.version }}
          docker push $IMAGE_ID:${{ steps.version.outputs.version }}
          
      - name: Push image to Docker Hub
        run: |
          IMAGE_ID=${{ env.DOCKER_IMAGE }}
          echo IMAGE_ID=$IMAGE_ID
          docker tag image $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
          docker tag image $IMAGE_ID:${{ steps.version.outputs.version }}
          docker push $IMAGE_ID:${{ steps.version.outputs.version }}


  cleanup-static-web-app:
    name: Cleanup Static Web App (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Close Pull Request
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
